/*Reverse Nodes in k-Group/*
 

 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* fun(ListNode *head, int k, int total)
    {
        ListNode *curr = head, *prev = NULL, *nxt = NULL;
        
        int cnt = 0;
        
        if(total < k)
            return head;
        
        while(curr!=NULL && cnt<k)
        {
            nxt = curr->next;
            
            curr->next = prev;
            prev = curr;
            curr = nxt;
            
            cnt++;
        }
        
        if(nxt != NULL)
            head->next = fun(nxt, k, total-k);
        
        head = prev;
        return head;
    }
    
    
    ListNode* reverseKGroup(ListNode* head, int k) 
    {
       ListNode *c = head;
        int count = 0;
        
        while(c != NULL)
        {
            count++;
            c = c->next;
        }
        
        if(count==0 || count<k)
            return head;
        
        else
            return fun(head, k ,count);
    }
        
    
};